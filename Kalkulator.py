# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o0SMcHuLQ2UO9JsNcPi7yWezV_GFt9WT
"""

while True:
    print('Masukkan nama Anda:')
    name = input()
    if name.isalpha():
        print("Halo", name)
        break
    print('Masukkan nama Anda dengan benar.')

list_a = range(1, 10, 2)
x = [[a**2, a**3] for a in list_a]
print(x)

def kali(angka1, angka2):
    # Kalikan kedua parameter
    hasil = angka1 * angka2
    print('Dicetak dari dalam fungsi: {}'.format(hasil))
    return hasil
 
# Panggil fungsi kali
keluaran = kali(10, 20);
print('Dicetak sebagai kembalian: {}'.format(keluaran))

def kuadrat(x):
    return x*x
a = input()
k = kuadrat(int(a))
print('nilai kuadrat dari {} adalah {}'.format(a, k))

class Kalkulator:
    """contoh kelas kalkulator sederhana. anggap kelas ini tidak boleh diubah!"""
 
    def __init__(self, nilai=0):
        self.nilai = nilai
 
    def tambah_angka(self, angka1, angka2):
        self.nilai = angka1 + angka2
        if self.nilai > 9:  # kalkulator sederhana hanya memroses sampai 9
            print('kalkulator sederhana melebihi batas angka: {}'.format(self.nilai))
        return self.nilai

class KalkulatorKali(Kalkulator):
    """contoh mewarisi kelas kalkulator sederhana"""
 
    def kali_angka(self, angka1, angka2):
        self.nilai = angka1 * angka2
        return self.nilai
 
    def tambah_angka(self, angka1, angka2):
        self.nilai = angka1 + angka2
        return self.nilai

class KalkulatorTambah(Kalkulator):
    """contoh mewarisi kelas kalkulator sederhana"""
 
    def tambah_angka(self, angka1, angka2):
        if angka1 + angka2 <= 9:  # fitur ini sudah oke di kelas dasar, gunakan yang ada saja
            super().tambah_angka(angka1, angka2)  # panggil fungsi dari Kalkulator lalu isi nilai
        else:  # ini adalah fitur baru yang ingin diperbaiki dari keterbatasan kelas dasar
            self.nilai = angka1 + angka2
        return self.nilai

kk = KalkulatorKali()

b = kk.tambah_angka(5, 6)  # fitur tambah_angka yang dipanggil milik KalkulatorKali
print(b)

import unittest
 
def koneksi_ke_db():
  print('[terhubung ke db]')
def putus_koneksi_db(db):
  print('[tidak terhubung ke db {}]'.format(db))
 
class User:
  username = ''
  aktif = False
  def __init__(self, db, username):  # using db sample
    self.username = username
  def set_aktif(self):
    self.aktif = True
 
class TestUser(unittest.TestCase):
  def setUp(self):
    self.db = koneksi_ke_db()
    self.dicoding = User(self.db, 'dicoding')
  def tearDown(self):
    putus_koneksi_db(self.db)
  def test_user_default_not_active(self):
    self.assertFalse(self.dicoding.aktif)  # tidak aktif secara default
  def test_user_is_active(self):
    self.dicoding.set_aktif()  # aktifkan user baru
    self.assertTrue(self.dicoding.aktif)
    
    
if __name__ == '__main__':
  unittest.main()

import argparse
 
parser = argparse.ArgumentParser()
parser.add_argument('-n', '--nama', required=True, help="Masukkan Nama Anda")
args = parser.parse_args()
 
print("Terima kasih telah menggunakan panggildicoding.py, "+args.nama)

int('2+3')